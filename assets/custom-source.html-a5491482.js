import{_ as n,W as s,X as a,a1 as e}from"./framework-bcad4379.js";const t={},o=e(`<p>文件请使用 UTF-8 编码格式编写，脚本所用编程语言为 JavaScript，可以使用 ES6+语法，脚本与应用的交互是使用类似事件收发的方 式进行，这是一个基本的脚本例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@name</span> 测试音乐源
 * <span class="token keyword">@description</span> 我只是一个测试音乐源哦
 * <span class="token keyword">@version</span> 1.0.0
 * <span class="token keyword">@author</span> xxx
 * <span class="token keyword">@homepage</span> http://xxx
 */</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token constant">EVENT_NAMES</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> on<span class="token punctuation">,</span> send <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>lx

<span class="token keyword">const</span> qualitys <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">kw</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;128k&#39;</span><span class="token operator">:</span> <span class="token string">&#39;128&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;320k&#39;</span><span class="token operator">:</span> <span class="token string">&#39;320&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">flac</span><span class="token operator">:</span> <span class="token string">&#39;flac&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">httpRequest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> resp</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> apis <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">kw</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">musicUrl</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> songmid <span class="token punctuation">}</span><span class="token punctuation">,</span> quality</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">httpRequest</span><span class="token punctuation">(</span><span class="token string">&#39;http://xxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> data<span class="token punctuation">.</span>url
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 注册应用API请求事件</span>
<span class="token comment">// source 音乐源，可能的值取决于初始化时传入的sources对象的源key值</span>
<span class="token comment">// info 请求附加信息，内容根据action变化</span>
<span class="token comment">// action 请求操作类型，目前只有musicUrl，即获取音乐URL链接，</span>
<span class="token comment">//    当action为musicUrl时info的结构：{type, musicInfo}，</span>
<span class="token comment">//        info.type：音乐质量，可能的值有128k / 320k / flac（取决于初始化时对应源传入的qualitys值中的一个），</span>
<span class="token comment">//        info.musicInfo：音乐信息对象，里面有音乐ID、名字等信息</span>

<span class="token function">on</span><span class="token punctuation">(</span><span class="token constant">EVENT_NAMES</span><span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> source<span class="token punctuation">,</span> action<span class="token punctuation">,</span> info <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 回调必须返回 Promise 对象</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// action 为 musicUrl 时需要在 Promise 返回歌曲 url</span>
    <span class="token keyword">case</span> <span class="token string">&#39;musicUrl&#39;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> apis<span class="token punctuation">[</span>source<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">musicUrl</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>musicInfo<span class="token punctuation">,</span> qualitys<span class="token punctuation">[</span>source<span class="token punctuation">]</span><span class="token punctuation">[</span>info<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 脚本初始化完成后需要发送inited事件告知应用</span>

<span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">EVENT_NAMES</span><span class="token punctuation">.</span>inited<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 初始化成功 or 失败</span>
  <span class="token literal-property property">openDevTools</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否打开开发者工具，方便用于调试脚本</span>
  <span class="token literal-property property">sources</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当前脚本支持的源</span>
    <span class="token literal-property property">kw</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 支持的源对象，可用key值：kw/kg/tx/wy/mg</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;酷我音乐&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;music&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 目前固定为 music</span>
      <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;musicUrl&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 目前固定为 [&#39;musicUrl&#39;]</span>
      <span class="token literal-property property">qualitys</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;128k&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;320k&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;flac&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 当前脚本的该源所支持获取的Url音质，有效的值有：[&#39;128k&#39;, &#39;320k&#39;, &#39;flac&#39;]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义源信息" tabindex="-1"><a class="header-anchor" href="#自定义源信息" aria-hidden="true">#</a> 自定义源信息</h2><p>文件的开头必须包含以下注释：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@name</span> 测试脚本
 * <span class="token keyword">@description</span> 我只是一个测试脚本
 * <span class="token keyword">@version</span> 1.0.0
 * <span class="token keyword">@author</span> xxx
 * <span class="token keyword">@homepage</span> http://xxx
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>@name </code>：源的名字，建议不要过长，24 个字符以内</p></li><li><p><code>@description </code>：源的描述，建议不要过长，36 个字符以内，可不填，不填时必须保留 @description</p></li><li><p><code>@version</code>：源的版本号，可不填，不填时可以删除 @version</p></li><li><p><code>@author </code>：脚本作者名字，可不填，不填时可以删除 @author</p></li><li><p><code>@homepage </code>：脚本主页，可不填，不填时可以删除 @homepage</p></li></ul><h2 id="window-lx" tabindex="-1"><a class="header-anchor" href="#window-lx" aria-hidden="true">#</a> <code>window.lx</code></h2><p>应用为脚本暴露的 API 对象。</p><h3 id="window-lx-version" tabindex="-1"><a class="header-anchor" href="#window-lx-version" aria-hidden="true">#</a> <code>window.lx.version</code></h3><p>自定义源 API 版本，API 变更时此版本号将会更改（新增于 v1.14.0 之后）</p><h3 id="window-lx-event-names" tabindex="-1"><a class="header-anchor" href="#window-lx-event-names" aria-hidden="true">#</a> <code>window.lx.EVENT_NAMES</code></h3><p>常量事件名称对象，发送、注册事件时传入事件名时使用，可用值：</p><table><thead><tr><th>事件名</th><th>描述</th></tr></thead><tbody><tr><td><code>inited</code></td><td>脚本初始化完成后发送给应用的事件名，发送该事件时需要传入以下信息：<code>{status, sources, openDevTools}</code><br><code>status</code>：初始化结果（<code>true</code>成功，<code>false</code>失败）<br><code>openDevTools</code>：是否打开 DevTools，此选项可用于开发脚本时的调试<br><code>sources</code>：支持的源信息对象，<br><code>sources[kw/kg/tx/wy/mg].name</code>：源的名字（目前非必须）<br><code>sources[kw/kg/tx/wy/mg].type</code>：源类型，目前固定值需为<code>music</code><br><code>sources[kw/kg/tx/wy/mg].actions</code>：支持的 actions，由于目前只支持<code>musicUrl</code>，所以固定传<code>[&#39;musicUrl&#39;]</code>即可<br><code>sources[kw/kg/tx/wy/mg].qualitys</code>：该源支持的音质列表，有效的值为<code>[&#39;128k&#39;, &#39;320k&#39;, &#39;flac&#39;]</code>，该字段用于控制应用可用的音质类型</td></tr><tr><td><code>request</code></td><td>应用 API 请求事件名，回调入参：<code>handler({ source, action, info})</code>，回调必须返回<code>Promise</code>对象<br><code>source</code>：音乐源，可能的值取决于初始化时传入的<code>sources</code>对象的源 key 值<br><code>info</code>：请求附加信息，内容根据<code>action</code>变化<br><code>action</code>：请求操作类型，目前只有<code>musicUrl</code>，即获取音乐 URL 链接，需要在 Promise 返回歌曲 url，<code>info</code>的结构：<code>{type, musicInfo}</code>，<code>info.type</code>：音乐质量，可能的值有<code>128k</code> / <code>320k</code> / <code>flac</code>（取决于初始化时对应源传入的<code>qualitys</code>值中的一个），<code>info.musicInfo</code>：音乐信息对象，里面有音乐 ID、名字等信息</td></tr><tr><td><code>updateAlert</code></td><td>显示源更新弹窗，发送该事件时的参数：<code>{log, updateUrl}</code><br><code>log</code>：更新日志，必传，字符串类型，内容可以使用<code>\\n</code>换行，最大长度 1024，超过此长度后将被截取超出的部分<br><code>updateUrl</code>：更新地址，用于引导用户去该地址更新源，选传，需为 http 协议的 url 地址，最大长度 1024<br>此事件每次运行脚本只能调用一次（源版本 v1.2.0 新增）<br>例子：<code>lx.send(lx.EVENT_NAMES.updateAlert, { log: &#39;hello world&#39;, updateUrl: &#39;https://xxx.com&#39; })</code></td></tr></tbody></table><h3 id="window-lx-on" tabindex="-1"><a class="header-anchor" href="#window-lx-on" aria-hidden="true">#</a> <code>window.lx.on</code></h3><p>事件注册方法，应用主动与脚本通信时使用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token parameter">event_name</span> 事件名
 * <span class="token keyword">@param</span> <span class="token parameter">handler</span> 事件处理回调 -- 注意：注册的回调必须返回 Promise 对象
 */</span>

window<span class="token punctuation">.</span>lx<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>event_name<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong> 注册的回调必须返回 <code>Promise</code> 对象。</p><h3 id="window-lx-send" tabindex="-1"><a class="header-anchor" href="#window-lx-send" aria-hidden="true">#</a> <code>window.lx.send</code></h3><p>事件发送方法，脚本主动与应用通信时使用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token parameter">event_name</span> 事件名
 * <span class="token keyword">@param</span> <span class="token parameter">datas</span> 要传给应用的数据
 */</span>

window<span class="token punctuation">.</span>lx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>event_name<span class="token punctuation">,</span> datas<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="window-lx-request" tabindex="-1"><a class="header-anchor" href="#window-lx-request" aria-hidden="true">#</a> <code>window.lx.request</code></h3><p>HTTP 请求方法，用于发送 HTTP 请求，此 HTTP 请求方法不受跨域规则限制：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token parameter">url</span> 请求的URL
 * <span class="token keyword">@param</span> <span class="token parameter">options</span> 请求选项，可用选项有 method / headers / body / form / formData / timeout
 * <span class="token keyword">@param</span> <span class="token parameter">callback</span> 请求结果的回调 入参：err, resp, body
 * <span class="token keyword">@return</span> 返回一个方法，调用此方法可以终止HTTP请求
 */</span>

<span class="token keyword">const</span> cancelHttp <span class="token operator">=</span> window<span class="token punctuation">.</span>lx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="window-lx-utils" tabindex="-1"><a class="header-anchor" href="#window-lx-utils" aria-hidden="true">#</a> <code>window.lx.utils</code></h3><p>应用提供给脚本的工具方法：</p><ul><li><p><code>window.lx.utils.buffer.from</code>：对应 Node.js 的 <code>Buffer.from</code></p></li><li><p><code>window.lx.utils.buffer.bufToString</code>：Buffer 转字符串 <code>bufToString(buffer, format)</code>，<code>format</code>对应 Node.js</p><ul><li><code>Buffer.toString</code>的参数（v1.14.0 之后新增）</li></ul></li><li><p><code>window.lx.utils.crypto.aesEncrypt</code>：AES 加密 <code>aesEncrypt(buffer, mode, key, iv)</code></p></li><li><p><code>window.lx.utils.crypto.md5</code>：MD5 加密 <code>md5(str)</code></p></li><li><p><code>window.lx.utils.crypto.randomBytes</code>：生成随机字符串 <code>randomBytes(size)</code></p></li><li><p><code>window.lx.utils.crypto.rsaEncrypt</code>：RSA 加密 <code>rsaEncrypt(buffer, key)</code></p></li></ul><p>目前仅提供以上工具方法，如果需要其他方法可以开 issue 讨论。</p>`,27),p=[o];function c(i,l){return s(),a("div",null,p)}const d=n(t,[["render",c],["__file","custom-source.html.vue"]]);export{d as default};
